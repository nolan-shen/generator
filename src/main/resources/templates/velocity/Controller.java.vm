package ${configMap.controllerPackage};

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.PathVariable;
import ${configMap.iServicePackage}.I${ClassName}Service;
import ${configMap.dtoPackage}.${ClassName}DTO;
import ${configMap.entityPackage}.${ClassName};
import org.springframework.security.access.prepost.PreAuthorize;
import com.wafersystems.virsical.common.core.util.R;

import java.util.List;

/**
 * @author $author
 * @date $date
 */
@Slf4j
@RestController
@AllArgsConstructor
@RequestMapping("/${classname}")
public class ${ClassName}Controller {

  @Autowired
  private I${ClassName}Service service;

  /**
   * 添加
   * @param dto
   * @return R
   */
  @PostMapping("/create")
  @PreAuthorize("")
  public R create(@Valid @RequestBody ${ClassName}DTO dto) {
      ${ClassName} entity = new ${ClassName}();
    BeanUtils.copyProperties(dto, entity);
    return R.ok(service.save(entity));
  }

  /**
   * 批量添加
   * @param dtoLis
   * @return R
   */
  @PostMapping(value = "/batch/create")
  @PreAuthorize("")
  public R batchCreate(@Valid @RequestBody ${ClassName}DTO dtoLis) {
    ArrayList<${ClassName}> entityList = new ArrayList<>(dtoList.size());
    dtoList.forEach(dto -> {
        ${ClassName} entity = new ${ClassName}();
      BeanUtils.copyProperties(dto, entity);
      entityList.add(entity);
    });
    return R.ok(service.saveBatch(entityList));
  }

  /**
   * 通过id删除
   * @param id
   * @return R
   */
  @PostMapping("/delete/{id}")
  @PreAuthorize("")
  public R deleteById(@PathVariable Integer id) {
    return R.ok(service.removeById(id));
  }

  /**
 * 通过id列表删除
 * @param ids
 * @return R
 */
  @PostMapping("/batch/delete")
  @PreAuthorize("")
  public R deleteByIds(@Valid @RequestBody List<Integer> ids) {
    return R.ok(service.removeByIds(ids));
  }

  /**
 * 修改
 * @param dto
 * @return R
 */
  @PostMapping("/update")
  @PreAuthorize("")
  public R update(@Valid @RequestBody ${ClassName}DTO dto) {
      ${ClassName} entity = new ${ClassName}();
    BeanUtils.copyProperties(dto, entity);
    return R.ok(service.updateById(entity));
  }

  /**
   * 批量修改
   * @param dtoLis
   * @return R
   */
  @PostMapping(value = "/batch/update")
  @PreAuthorize("")
  public R batchUpdate(@Valid @RequestBody ${ClassName}DTO dtoLis) {
    ArrayList<${ClassName}> entityList = new ArrayList<>(dtoList.size());
    dtoList.forEach(dto -> {
        ${ClassName} entity = new ${ClassName}();
      BeanUtils.copyProperties(dto, entity);
      entityList.add(entity);
    });
    return R.ok(service.updateBatchById(entityList));
  }

  /**
  *
* @param id
* @return
*/
  @GetMapping("/{id}")
  @PreAuthorize("")
  public R getById(@PathVariable Integer id) {
    return R.ok(service.getById(id));
  }

  @ApiResponses({
          @ApiResponse(code = 200, message = "Core Object Model", response = ${ClassName}ResponseDTO.class)
  })
      #if($isRelationTable == false)
      @RequestPermission("${class_name}")
      #end
  @PostMapping(value = "/detail", method = RequestMethod.GET)
  public ResponseEntity<?> detail(@RequestParam Long id) {
    return R.success(${className}MapStruct.toResponseDTO(${className}Service.findOneById(id)));
  }

  @ApiResponses({
          @ApiResponse(code = 200, message = "Core Object Model", response = ${ClassName}ResponseDTO.class)
  })
      #if($isRelationTable == false)
      @RequestPermission("${class_name}")
      #end
  @RequestMapping(value = "/listByIdList", method = RequestMethod.POST)
  public ResponseEntity<?> listByIdList(@Valid @RequestBody IdListRequestParam param) {
    return R.success(${className}MapStruct.toResponseDTOList(${className}Service.findListByIdList(param.getIdList())));
  }

  @ApiResponses({
          @ApiResponse(code = 200, message = "Core Object Model", response = ${ClassName}ResponseDTO.class)
  })
      #if($isRelationTable == false)
      @RequestPermission("${class_name}")
      #end
  @RequestMapping(value = "/list", method = RequestMethod.POST)
  public ResponseEntity<?> list(@RequestBody ${ClassName}PageQueryParam param) {
    List<${ClassName}> result = ${className}Service.findListByServiceBO(${className}MapStruct.pageQueryParamToServiceBO(param));
    return R.success(${className}MapStruct.toResponseDTOList(result));
  }

  @ApiResponses({
          @ApiResponse(code = 200, message = "Core Object Model", response = ${ClassName}ResponseDTO.class)
  })
      #if($isRelationTable == false)
      @RequestPermission("${class_name}")
      #end
  @RequestMapping(value = "/page", method = RequestMethod.POST)
  public ResponseEntity<?> page(@Valid @RequestBody ${ClassName}PageQueryParam param) {
    PageInfo result = ${className}Service.findPageByServiceBO(${className}MapStruct.pageQueryParamToServiceBO(param));
    result.setList(${className}MapStruct.toResponseDTOList(result.getList()));
    return R.success(result);
  }
}
