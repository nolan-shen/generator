package ${configMap.controllerPackage};

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import ${configMap.iServicePackage}.I${ClassName}Service;
import ${configMap.dtoPackage}.${ClassName}DTO;
import ${configMap.entityPackage}.${ClassName};
import org.springframework.security.access.prepost.PreAuthorize;
import com.wafersystems.virsical.common.core.util.R;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.beans.BeanUtils;
import java.util.List;
import javax.validation.Valid;
import java.util.ArrayList;

/**
 * @author $author
 * @date $date
 */
@Slf4j
@RestController
@AllArgsConstructor
@RequestMapping("/${classname}")
public class ${ClassName}Controller {

  @Autowired
  private I${ClassName}Service service;

  /**
   * 添加
   *
   * @param dto
   * @return R
   */
  @PostMapping("/create")
  @PreAuthorize("@pms.hasPermission('')")
  public R create(@Valid @RequestBody ${ClassName}DTO dto) {
    ${ClassName} entity = new ${ClassName}();
    BeanUtils.copyProperties(dto, entity);
    return R.ok(service.save(entity));
  }

  /**
   * 批量添加
   *
   * @param dtoList
   * @return R
   */
  @PostMapping(value = "/batch/create")
  @PreAuthorize("@pms.hasPermission('')")
  public R batchCreate(@Valid @RequestBody List<${ClassName}DTO> dtoList) {
    ArrayList<${ClassName}> entityList = new ArrayList<>(dtoList.size());
    dtoList.forEach(dto -> {
      ${ClassName} entity = new ${ClassName}();
      BeanUtils.copyProperties(dto, entity);
      entityList.add(entity);
    });
    return R.ok(service.saveBatch(entityList));
  }

  /**
   * 通过id删除
   *
   * @param id
   * @return R
   */
  @PostMapping("/delete/{id}")
  @PreAuthorize("@pms.hasPermission('')")
  public R deleteById(@PathVariable Integer id) {
    return R.ok(service.removeById(id));
  }

  /**
   * 通过id列表删除
   *
   * @param ids
   * @return R
   */
  @PostMapping("/batch/delete")
  @PreAuthorize("@pms.hasPermission('')")
  public R deleteByIds(@Valid @RequestBody List<Integer> ids) {
    return R.ok(service.removeByIds(ids));
  }

  /**
   * 修改
   *
   * @param dto
   * @return R
   */
  @PostMapping("/update")
  @PreAuthorize("@pms.hasPermission('')")
  public R update(@Valid @RequestBody ${ClassName}DTO dto) {
    ${ClassName} entity = new ${ClassName}();
    BeanUtils.copyProperties(dto, entity);
    return R.ok(service.updateById(entity));
  }

  /**
   * 批量修改
   *
   * @param dtoList
   * @return R
   */
  @PostMapping(value = "/batch/update")
  @PreAuthorize("@pms.hasPermission('')")
  public R batchUpdate(@Valid @RequestBody List<${ClassName}DTO> dtoList) {
    ArrayList<${ClassName}> entityList = new ArrayList<>(dtoList.size());
    dtoList.forEach(dto -> {
      ${ClassName} entity = new ${ClassName}();
      BeanUtils.copyProperties(dto, entity);
      entityList.add(entity);
    });
    return R.ok(service.updateBatchById(entityList));
  }

  /**
   * 通过id查询
   *
   * @param id
   * @return R
   */
  @GetMapping("/{id}")
  @PreAuthorize("@pms.hasPermission('')")
  public R getById(@PathVariable Integer id) {
    return R.ok(service.getById(id));
  }

  /**
   * list
   *
   * @return R
   */
  @PostMapping("/list")
  @PreAuthorize("@pms.hasPermission('')")
  public R list() {
    return R.ok(service.list());
  }

  /**
   * 通过ids查询
   *
   * @param ids
   * @return R
   */
  @PostMapping("/listById")
  @PreAuthorize("@pms.hasPermission('')")
  public R listById(@Valid @RequestBody List<Integer> ids) {
    return R.ok(service.listByIds(ids));
  }


  /**
   * 分页查询
   *
   * @param size
   * @param current
   * @return R
   */
  @GetMapping("/page")
  @PreAuthorize("@pms.hasPermission('')")
  public R page(Long size, Long current) {
    Page page = getPage(size, current);
    return R.ok(service.page(page));
  }

  /**
   * 获取分页对象
   *
   * @param size    页数
   * @param current 当前页
   * @return Page
   */
  private Page<${ClassName}> getPage(Long size, Long current) {
    Page<${ClassName}> page = new Page<>();
    if (size != null) {
      page.setSize(size);
    }
    if (current != null) {
      page.setCurrent(current);
    }
    return page;
  }
}
