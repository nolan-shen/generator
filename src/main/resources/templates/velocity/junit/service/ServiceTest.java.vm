package ${javaRootPackage}.service;

import ${javaRootPackage}.Application;
import ${javaRootPackage}.constant.GlobalConstantToJunit;
import ${javaRootPackage}.enums.*;
import ${javaRootPackage}.pojo.dto.response.${classname}.${ClassName}ResponseDTO;
import ${javaRootPackage}.pojo.bo.service.BatchDeleteServiceBO;
import ${javaRootPackage}.pojo.bo.service.BatchUpdateStateServiceBO;
import ${javaRootPackage}.pojo.bo.service.${classname}.${ClassName}PageQueryServiceBO;
import ${javaRootPackage}.pojo.bo.service.${classname}.${ClassName}CreateServiceBO;
import ${javaRootPackage}.pojo.bo.service.${classname}.${ClassName}UpdateServiceBO;
import ${javaRootPackage}.pojo.entity.${ClassName};
import ${javaRootPackage}.util.UserInfoContext;
import ${javaRootPackage}.util.RandomUtil;
import ${javaRootPackage}.util.DatetimeUtil;
import ${javaRootPackage}.util.id.GenerateIdUtil;
import com.cdk8s.tkey.client.rest.pojo.dto.OauthUserAttribute;
import com.cdk8s.tkey.client.rest.pojo.dto.OauthUserProfile;
import com.github.pagehelper.PageInfo;
import com.google.common.collect.Lists;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.hamcrest.Matchers;
import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;
import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.assertThat;

/**
 * @author $author
 * @date $date
 */
@Slf4j
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
public class ${ClassName}ServiceTest {

	private static final Long ID = GenerateIdUtil.getId();

	@Autowired
	private ${ClassName}Service ${className}Service;

	// =====================================预处理 start=====================================

	@SneakyThrows
	@BeforeClass
	public static void a_beforeClass() {
		OauthUserProfile oauthUserProfile = new OauthUserProfile();
		oauthUserProfile.setUsername(GlobalConstantToJunit.USERNAME);
		oauthUserProfile.setName(GlobalConstantToJunit.USERNAME);
		oauthUserProfile.setId(GlobalConstantToJunit.USER_ID);
		oauthUserProfile.setUserId(GlobalConstantToJunit.USER_ID);
		OauthUserAttribute oauthUserAttribute = new OauthUserAttribute();
		oauthUserAttribute.setEmail(GlobalConstantToJunit.USER_EMAIL);
		oauthUserAttribute.setUserId(GlobalConstantToJunit.USER_ID);
		oauthUserAttribute.setUsername(GlobalConstantToJunit.USERNAME);
		oauthUserProfile.setUserAttribute(oauthUserAttribute);
		UserInfoContext.setCurrentUser(oauthUserProfile);
	}

	// =====================================预处理 end=====================================
	// =====================================查询业务 start=====================================

	@Test
	public void a_findOneById() {
		${ClassName} result = ${className}Service.findOneById(ID);

		assertThat(result, Matchers.notNullValue());
	}

	@Test
	public void a_findListByIdList() {
		ArrayList<Long> idList = Lists.newArrayList(ID, 222222222222222222L);
		List<${ClassName}> result = ${className}Service.findListByIdList(idList);

		assertThat(result.size(), Matchers.greaterThan(0));
	}

	@Test
	public void a_findListByServiceBO() {
		${ClassName}PageQueryServiceBO serviceBO = new ${ClassName}PageQueryServiceBO();
#if($isIncludeStateEnum)
		serviceBO.setStateEnum(StateEnum.ENABLE.getCode());
#end
#if($isIncludeDeleteEnum)
		serviceBO.setDeleteEnum(DeleteEnum.NOT_DELETED.getCode());
#end
		serviceBO.setCreateDateStartDate(631183520000L);
		serviceBO.setCreateDateEndDate(1893487520000L);

		List<${ClassName}> result = ${className}Service.findListByServiceBO(serviceBO);

		assertThat(result.size(), Matchers.greaterThan(0));
	}

	@Test
	public void a_findPageByServiceBO() {
		${ClassName}PageQueryServiceBO serviceBO = new ${ClassName}PageQueryServiceBO();
#if($isIncludeStateEnum)
		serviceBO.setStateEnum(StateEnum.ENABLE.getCode());
#end
#if($isIncludeDeleteEnum)
		serviceBO.setDeleteEnum(DeleteEnum.NOT_DELETED.getCode());
#end
		serviceBO.setPageNum(1);
		serviceBO.setPageSize(10);
		serviceBO.setCreateDateStartDate(631183520000L);
		serviceBO.setCreateDateEndDate(1893487520000L);

		PageInfo result = ${className}Service.findPageByServiceBO(serviceBO);

		assertThat(result.getList().size(), Matchers.greaterThan(0));
	}

	// =====================================查询业务 end=====================================
	// =====================================操作业务 start=====================================

	@Test
	public void a_create() {
		long currentEpochMilli = DatetimeUtil.currentEpochMilli();
		Long currentUserId = UserInfoContext.getCurrentUserId();

		${ClassName}CreateServiceBO serviceBO = new ${ClassName}CreateServiceBO();
		// cdk8stodo 根据业务补充其他属性：RandomUtil.randomAlphabetic(6)
		serviceBO.setId(ID);
#foreach ($column in $createRequestParamColumns)
#if($column.boolIsNullable == false && $column.upperAttrName != "Id")
#if($column.attrType == "String")
		serviceBO.set${column.upperAttrName}(RandomUtil.randomAlphabetic(6));
#elseif($column.upperAttrName == "Ranking")
		serviceBO.setRanking(100);
#elseif($column.upperAttrName == "StateEnum")
		serviceBO.setStateEnum(StateEnum.ENABLE.getCode());
#elseif($column.upperAttrName.toString().contains("Enum") && !$column.upperAttrName.toString().contains("Bool"))
		serviceBO.set${column.upperAttrName}(${column.upperAttrName}.getRandomEnum().getCode());
#elseif($column.upperAttrName.toString().contains("Enum") && $column.upperAttrName.toString().contains("Bool"))
		serviceBO.set${column.upperAttrName}(BooleanEnum.getRandomEnum().getCode());
#else
		serviceBO.set${column.upperAttrName}();
#end
#end
#end

#if($isIncludeDeleteEnum)
		serviceBO.setDeleteEnum(DeleteEnum.NOT_DELETED.getCode());
#end
#if($isIncludeCreateDate)
		serviceBO.setCreateDate(currentEpochMilli);
		serviceBO.setCreateUserId(currentUserId);
#end
#if($isIncludeUpdateDate)
		serviceBO.setUpdateDate(currentEpochMilli);
		serviceBO.setUpdateUserId(currentUserId);
#end

		Integer result = ${className}Service.create(serviceBO);

		assertThat(result, Matchers.greaterThan(0));
	}

	@Transactional
	@Test
	public void b_update() {
		long currentEpochMilli = DatetimeUtil.currentEpochMilli();
		Long currentUserId = UserInfoContext.getCurrentUserId();

		${ClassName}UpdateServiceBO serviceBO = new ${ClassName}UpdateServiceBO();
		// cdk8stodo 根据业务补充其他属性：RandomUtil.randomAlphabetic(6)
		serviceBO.setId(ID);
#foreach ($column in $updateRequestServiceBOColumnsToServiceTest)
#if($column.boolIsNullable == false)
#if($column.attrType == "String")
		serviceBO.set${column.upperAttrName}(RandomUtil.randomAlphabetic(6));
#elseif($column.upperAttrName == "Ranking")
		serviceBO.setRanking(100);
#elseif($column.upperAttrName == "StateEnum")
		serviceBO.setStateEnum(StateEnum.ENABLE.getCode());
#elseif($column.upperAttrName.toString().contains("Enum") && !$column.upperAttrName.toString().contains("Bool"))
		serviceBO.set${column.upperAttrName}(${column.upperAttrName}.getRandomEnum().getCode());
#elseif($column.upperAttrName.toString().contains("Enum") && $column.upperAttrName.toString().contains("Bool"))
		serviceBO.set${column.upperAttrName}(BooleanEnum.getRandomEnum().getCode());
#else
		serviceBO.set${column.upperAttrName}();
#end
#end
#end

#if($isIncludeUpdateDate)
		serviceBO.setUpdateDate(currentEpochMilli);
		serviceBO.setUpdateUserId(currentUserId);
#end

		Integer result = ${className}Service.update(serviceBO);

		assertThat(result, Matchers.greaterThan(0));
	}

#if($isIncludeStateEnum)
	@Transactional
	@Test
	public void b_batchUpdateState() {
		long currentEpochMilli = DatetimeUtil.currentEpochMilli();
		Long currentUserId = UserInfoContext.getCurrentUserId();

		ArrayList<Long> idList = Lists.newArrayList(ID, 222222222222222222L);
		BatchUpdateStateServiceBO serviceBO = new BatchUpdateStateServiceBO();
		serviceBO.setIdList(idList);
		serviceBO.setStateEnum(StateEnum.DISABLE.getCode());

#if($isIncludeUpdateDate)
		serviceBO.setUpdateDate(currentEpochMilli);
		serviceBO.setUpdateUserId(currentUserId);
#end

		Integer result = ${className}Service.batchUpdateState(serviceBO);

		assertThat(result, Matchers.greaterThan(0));
	}
#end

	@Transactional
	@Test
	public void m_batchDelete() {
		long currentEpochMilli = DatetimeUtil.currentEpochMilli();
		Long currentUserId = UserInfoContext.getCurrentUserId();

		ArrayList<Long> idList = Lists.newArrayList(ID, 222222222222222222L);
		BatchDeleteServiceBO serviceBO = new BatchDeleteServiceBO();
		serviceBO.setIdList(idList);

#if($isIncludeDeleteEnum)
		serviceBO.setDeleteEnum(DeleteEnum.DELETED.getCode());
		serviceBO.setDeleteDate(currentEpochMilli);
		serviceBO.setDeleteUserId(currentUserId);

#if($isIncludeUpdateDate)
		serviceBO.setUpdateDate(currentEpochMilli);
		serviceBO.setUpdateUserId(currentUserId);
#end
#end


		Integer result = ${className}Service.batchDelete(serviceBO);

		assertThat(result, Matchers.greaterThan(0));
	}

	// =====================================操作业务 end=====================================
	// =====================================私有方法 start=====================================

	// =====================================私有方法 end=====================================
}
