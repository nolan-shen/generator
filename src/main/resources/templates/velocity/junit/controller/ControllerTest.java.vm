package ${configMap.controllerPackage};

import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.annotation.Rollback;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import cn.hutool.core.util.RandomUtil;
import com.wafersystems.virsical.common.core.tenant.TenantContextHolder;
import com.wafersystems.virsical.admin.BaseTest;
import java.util.ArrayList;
import org.springframework.beans.BeanUtils;
import org.springframework.util.MultiValueMap;
import java.lang.Integer;
import java.util.ArrayList; ${configMap.dtoPackage}.${ClassName}DTO;
import ${configMap.entityPackage}.${ClassName};
/**
 * @author $author
 * @date $date
 */
@Rollback
@WithMockUser(authorities = {""})
public class ${ClassName}ControllerTest extends BaseTest {
  private static final String MODULE_NAME = "${classname}";
  private static final String CREATE_URL = "/" + MODULE_NAME + "/create";
  private static final String BATCH_CREATE_URL = "/" + MODULE_NAME + "/batch/create";
  private static final String DELETE_URL = "/" + MODULE_NAME + "/delete/";
  private static final String BATCH_DELETE_URL = "/" + MODULE_NAME + "/batch/delete";
  private static final String UPDATE_URL = "/" + MODULE_NAME + "/update";
  private static final String BATCH_UPDATE_URL = "/" + MODULE_NAME + "/batch/update";
  private static final String GET_BY_ID_URL = "/" + MODULE_NAME + "/";
  private static final String GET_LIST_URL = "/" + MODULE_NAME + "/list";
  private static final String LIST_BY_IDS_URL = "/" + MODULE_NAME + "/listByIds";
  private static final String PAGE_URL = "/" + MODULE_NAME + "/page";
  ${ClassName} entity = new ${ClassName};

  @BeforeClass
  public void initData() {
    TenantContextHolder.setTenantId(1);
    ${ClassName}DTO dto = createDto();
    BeanUtils.copyProperties(dto, entity);
    entity.insert();
  }

  @AfterClass
  public void cleanData() {
    TenantContextHolder.setTenantId(1);
    entity.deleteById();
  }

  /**
   * 创建dto
   */
  private ${ClassName}DTO createDto() {
    ${ClassName}DTO dto = new ${ClassName}DTO();
#foreach ($column in $columnsNonePk)
#if($column.boolIsNullable == false)
#if($column.attrType == "String")
    dto.set${column.upperAttrName}(RandomUtil.randomString(3));
#elseif($column.attrType == "Integer")
    dto.set${column.upperAttrName}(RandomUtil.randomInt(3));
#elseif($column.attrType == "Long")
    dto.set${column.upperAttrName}(RandomUtil.randomLong(3));
#elseif($column.attrType == "BigDecimal")
    dto.set${column.upperAttrName}(RandomUtil.randomBigDecimal());
#else
    dto.set${column.upperAttrName}("0");
#end
#end
#end
    return dto;
  }

  /**
   * 添加
   */
  @Test
  public void createTest() throws Exception {
    ${ClassName}DTO dto = createDto();
    String content = JSON.toJSONString(dto);
    JSONObject jsonObject = doPost(CREATE_URL, content, null, false, false);
    Assert.assertEquals(jsonObject.get("code"), CommonConstants.SUCCESS);
  }

  /**
   * 批量添加
   */
  @Test
  public void batchCreateTest() throws Exception {
    ArrayList<${ClassName}DTO> list = new ArrayList<>(3);
    list.add(createDto());
    list.add(createDto());
    list.add(createDto());
    String content = JSON.toJSONString(list);
    JSONObject jsonObject = doPost(BATCH_CREATE_URL, content, null, false, false);
    Assert.assertEquals(jsonObject.get("code"), CommonConstants.SUCCESS);
  }

  /**
   * 通过id删除
   */
  @Test
  public void deleteByIdTest() throws Exception {
    JSONObject jsonObject = doPost(DELETE_URL+entity.getId(), null, null, false, false);
    Assert.assertEquals(jsonObject.get("code"), CommonConstants.SUCCESS);
  }

  /**
   * 通过id列表删除
   */
  @Test
  public void batchCreateTest() throws Exception {
    ArrayList<Integer> list = new ArrayList<>(1);
    list.add(entity.getId());
    String content = JSON.toJSONString(list);
    JSONObject jsonObject = doPost(BATCH_DELETE_URL, content, null, false, false);
    Assert.assertEquals(jsonObject.get("code"), CommonConstants.SUCCESS);
  }

  /**
   * 修改
   */
  @Test
  public void updateTest() throws Exception {
    ${ClassName}DTO dto = createDto();
    dto.setId(entity.getId());
    String content = JSON.toJSONString(dto);
    JSONObject jsonObject = doPost(UPDATE_URL, content, null, false, false);
    Assert.assertEquals(jsonObject.get("code"), CommonConstants.SUCCESS);
  }

  /**
   * 批量修改
   */
  @Test
  public void batchUpdateTest() throws Exception {
    ${ClassName}DTO dto = createDto();
    dto.setId(entity.getId());
    ArrayList<${ClassName}DTO> list = new ArrayList<>(1);
    list.add(dto);
    String content = JSON.toJSONString(list);
    JSONObject jsonObject = doPost(BATCH_UPDATE_URL, content, null, false, false);
    Assert.assertEquals(jsonObject.get("code"), CommonConstants.SUCCESS);
  }

  /**
   * 通过id查询
   */
  @Test
  public void getByIdTest() throws Exception {
    JSONObject jsonObject = doGet(GET_BY_ID_URL+entity.getId(), false, true, null);
    Assert.assertEquals(jsonObject.get("code"), CommonConstants.SUCCESS);
  }

  /**
   * list
   */
  @Test
  public void listTest() throws Exception {
    JSONObject jsonObject = doGet(GET_LIST_URL, false, true, null);
    Assert.assertEquals(jsonObject.get("code"), CommonConstants.SUCCESS);
  }

  /**
   * 通过ids查询
   */
  @Test
  public void listByIdsTest() throws Exception {
    MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
    params.add("ids", "["+entity.getId()+"]");
    JSONObject jsonObject = doGet(LIST_BY_IDS_URL, false, true, params);
    Assert.assertEquals(jsonObject.get("code"), CommonConstants.SUCCESS);
  }

  /**
   * 分页查询
   */
  @Test
  public void pageTest() throws Exception {
    MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
    params.add("size", "10");
    params.add("current", "1");
    JSONObject jsonObject = doGet(PAGE_URL, false, true, params);
    Assert.assertEquals(jsonObject.get("code"), CommonConstants.SUCCESS);
  }
}
